set pagesize 100
set linesize 200


---PL SQL

---PL/SQL block to calculate and update the total amount paid for each order:
DECLARE
  v_order_id orders.order_id%TYPE;
  v_total_amount NUMBER(10, 2);
BEGIN
  FOR rec IN (select order_id from orders)
  LOOP
    v_order_id := rec.order_id;
    
    select SUM(amount) INTO v_total_amount
    from payments
    WHERE order_id = v_order_id;
    
    UPDATE payments
    SET amount= v_total_amount
    WHERE order_id = v_order_id;
    
    COMMIT;
  END LOOP;
END;
/


     prompt *=*=*=*=*=*=*=*= Chaecking *=*=*=*=*=*=*=*=*=*=*=*=

--- PL/SQL block to retrieve customer details and the total number of orders placed:
set serveroutput on
DECLARE
  v_customer_id customers.customer_id%TYPE;
  v_customer_name customers.name%TYPE;
  v_order_count NUMBER;
BEGIN
  FOR rec IN (select customer_id, name from customers)
  LOOP
    v_customer_id := rec.customer_id;
    v_customer_name := rec.name;
    
    select COUNT(*) INTO v_order_count
    from orders
    WHERE customer_id = v_customer_id;
    
    DBMS_OUTPUT.PUT_LINE('Customer Name: ' || v_customer_name);
    DBMS_OUTPUT.PUT_LINE('Total Orders: ' || v_order_count);
    DBMS_OUTPUT.PUT_LINE('-------------------------');
  END LOOP;
END;
/



---PL/SQL block to delete all orders placed by a specific customer:
set serveroutput on
DECLARE
  v_customer_id customers.customer_id%TYPE:= 1; -- orders of customerid to be deleted
BEGIN
  DELETE from orders
  WHERE customer_id = v_customer_id;
  
  COMMIT;
  
  DBMS_OUTPUT.PUT_LINE('All orders for Customer ID ' || v_customer_id || ' have been deleted.');
END;
/





--- PL/SQL block to retrieve all customers who have pending orders:
set serveroutput on
DECLARE
  v_customer_id customers.customer_id%TYPE;
  v_customer_name customers.name%TYPE;
BEGIN
  FOR rec IN (select c.customer_id, c.name
              from customers c
              WHERE EXISTS (
                select 1
                from orders o
                WHERE o.customer_id = c.customer_id
                  AND o.status = 'Pending'
              ))
  LOOP
    v_customer_id := rec.customer_id;
    v_customer_name := rec.name;
    
    DBMS_OUTPUT.PUT_LINE('Customer ID: ' || v_customer_id);
    DBMS_OUTPUT.PUT_LINE('Customer Name: ' || v_customer_name);
    DBMS_OUTPUT.PUT_LINE('-------------------------');
  END LOOP;
END;
/


---PL/SQL block to calculate the total revenue generated by each customer:
SET SERVEROUTPUT ON

DECLARE
  v_customer_id customers.customer_id%TYPE;
  v_customer_name customers.name%TYPE;
  v_total_revenue NUMBER(10, 2);
BEGIN
  FOR rec IN (SELECT DISTINCT c.customer_id, c.name
              FROM customers c
              JOIN orders o ON c.customer_id = o.customer_id
              JOIN products p ON o.product_id = p.product_id)
  LOOP
    v_customer_id := rec.customer_id;
    v_customer_name := rec.name;
    
    SELECT SUM(o.quantity * p.price) INTO v_total_revenue
    FROM orders o
    JOIN products p ON o.product_id = p.product_id
    WHERE o.customer_id = v_customer_id;
    
    DBMS_OUTPUT.PUT_LINE('Customer ID: ' || v_customer_id);
    DBMS_OUTPUT.PUT_LINE('Customer Name: ' || v_customer_name);
    DBMS_OUTPUT.PUT_LINE('Total Revenue: $' || v_total_revenue);
    DBMS_OUTPUT.PUT_LINE('-------------------------');
  END LOOP;
END;
/


---output customer id and name

set serveroutput on
declare 
cursor customer_cursor is select * from customers;
CR customers%rowtype;


begin
open customer_cursor;
                                                       ---fetch customer_cursor into CR.customers_id,CR.customers_name,CR.faculty,CR.no_of_student;
fetch customer_cursor into CR;
while customer_cursor%found loop
dbms_output.put_line('customers_id: '||CR.customer_id|| ' customers_name: '||CR.name );
dbms_output.put_line('Row count: '|| customer_cursor%rowcount);

                                                       ---fetch customer_cursor into CR.customers_id,CR.customers_name,CR.faculty,CR.no_of_student;
fetch customer_cursor into CR;
end loop;
close customer_cursor;
end;
/



drop table test;
CREATE table test(
customer_id NUMBER(10) PRIMARY KEY,
name VARCHAR(100) NOT NULL,
quantity NUMBER(10) NOT NULL);


--- PL/SQL block to retrieve customer details and the total number of orders placed:
set serveroutput on
DECLARE
  v_customer_id customers.customer_id%TYPE;
  v_customer_name customers.name%TYPE;
  v_order_count NUMBER;
BEGIN
  FOR rec IN (select customer_id, name from customers)
  LOOP
    v_customer_id := rec.customer_id;
    v_customer_name := rec.name;
    
    select COUNT(*) INTO v_order_count
    from orders
    WHERE customer_id = v_customer_id;

    insert into test VALUES(v_customer_id,v_customer_name,v_order_count);

    DBMS_OUTPUT.PUT_LINE('Customer Name: ' || v_customer_name);
    DBMS_OUTPUT.PUT_LINE('Total Orders: ' || v_order_count);
    DBMS_OUTPUT.PUT_LINE('-------------------------');
    
  END LOOP;
END;
/


select name,quantity from 
( select 
     customer_id,name,quantity,ROW_NUMBER() OVER(ORDER BY quantity DESC) AS rrow
     from test) 
WHERE rrow>=0
And rrow<=3;






---procedure that retrieves the total revenue for each customer :

set serveroutput on
CREATE OR REPLACE PROCEDURE calculate_total_revenue IS
BEGIN
  FOR rec IN (SELECT c.customer_id, c.name
              FROM customers c
              JOIN orders o ON c.customer_id = o.customer_id
              JOIN products p ON o.product_id = p.product_id)
  LOOP
    DECLARE
      v_customer_id customers.customer_id%TYPE := rec.customer_id;
      v_customer_name customers.name%TYPE := rec.name;
      v_total_revenue NUMBER(10, 2);
    BEGIN
      SELECT SUM(o.quantity * p.price) INTO v_total_revenue
      FROM orders o
      JOIN products p ON o.product_id = p.product_id
      WHERE o.customer_id = v_customer_id;
      
      DBMS_OUTPUT.PUT_LINE('Customer ID: ' || v_customer_id);
      DBMS_OUTPUT.PUT_LINE('Customer Name: ' || v_customer_name);
      DBMS_OUTPUT.PUT_LINE('Total Revenue: $' || v_total_revenue);
      DBMS_OUTPUT.PUT_LINE('-------------------------');
    END;
  END LOOP;
END;
/




---automatically update the total revenue
CREATE OR REPLACE TRIGGER update_total_revenue
AFTER INSERT OR UPDATE ON orders
FOR EACH ROW
DECLARE
  v_customer_id customers.customer_id%TYPE;
BEGIN

    v_customer_id := :NEW.customer_id;


  UPDATE orders o
  SET total_revenue = (
    SELECT (o.quantity * p.price)
    FROM orders o
    JOIN products p ON o.product_id = p.product_id
    WHERE o.customer_id = v_customer_id
  )
  WHERE o.customer_id = v_customer_id;
END;
/
